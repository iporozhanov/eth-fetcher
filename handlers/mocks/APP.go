// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "eth-fetcher/database/models"

	mock "github.com/stretchr/testify/mock"
)

// APP is an autogenerated mock type for the APP type
type APP struct {
	mock.Mock
}

type APP_Expecter struct {
	mock *mock.Mock
}

func (_m *APP) EXPECT() *APP_Expecter {
	return &APP_Expecter{mock: &_m.Mock}
}

// AddUserTransactions provides a mock function with given fields: userID, transactions
func (_m *APP) AddUserTransactions(userID string, transactions []*models.Transaction) error {
	ret := _m.Called(userID, transactions)

	if len(ret) == 0 {
		panic("no return value specified for AddUserTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*models.Transaction) error); ok {
		r0 = rf(userID, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// APP_AddUserTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserTransactions'
type APP_AddUserTransactions_Call struct {
	*mock.Call
}

// AddUserTransactions is a helper method to define mock.On call
//   - userID string
//   - transactions []*models.Transaction
func (_e *APP_Expecter) AddUserTransactions(userID interface{}, transactions interface{}) *APP_AddUserTransactions_Call {
	return &APP_AddUserTransactions_Call{Call: _e.mock.On("AddUserTransactions", userID, transactions)}
}

func (_c *APP_AddUserTransactions_Call) Run(run func(userID string, transactions []*models.Transaction)) *APP_AddUserTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*models.Transaction))
	})
	return _c
}

func (_c *APP_AddUserTransactions_Call) Return(_a0 error) *APP_AddUserTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *APP_AddUserTransactions_Call) RunAndReturn(run func(string, []*models.Transaction) error) *APP_AddUserTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserCredentials provides a mock function with given fields: username, password
func (_m *APP) CheckUserCredentials(username string, password string) (*models.User, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserCredentials")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.User, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APP_CheckUserCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserCredentials'
type APP_CheckUserCredentials_Call struct {
	*mock.Call
}

// CheckUserCredentials is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *APP_Expecter) CheckUserCredentials(username interface{}, password interface{}) *APP_CheckUserCredentials_Call {
	return &APP_CheckUserCredentials_Call{Call: _e.mock.On("CheckUserCredentials", username, password)}
}

func (_c *APP_CheckUserCredentials_Call) Run(run func(username string, password string)) *APP_CheckUserCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *APP_CheckUserCredentials_Call) Return(_a0 *models.User, _a1 error) *APP_CheckUserCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APP_CheckUserCredentials_Call) RunAndReturn(run func(string, string) (*models.User, error)) *APP_CheckUserCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTransactions provides a mock function with given fields:
func (_m *APP) GetAllTransactions() ([]*models.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APP_GetAllTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTransactions'
type APP_GetAllTransactions_Call struct {
	*mock.Call
}

// GetAllTransactions is a helper method to define mock.On call
func (_e *APP_Expecter) GetAllTransactions() *APP_GetAllTransactions_Call {
	return &APP_GetAllTransactions_Call{Call: _e.mock.On("GetAllTransactions")}
}

func (_c *APP_GetAllTransactions_Call) Run(run func()) *APP_GetAllTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *APP_GetAllTransactions_Call) Return(_a0 []*models.Transaction, _a1 error) *APP_GetAllTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APP_GetAllTransactions_Call) RunAndReturn(run func() ([]*models.Transaction, error)) *APP_GetAllTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionsByHashes provides a mock function with given fields: transactionHashes
func (_m *APP) GetTransactionsByHashes(transactionHashes []string) ([]*models.Transaction, error) {
	ret := _m.Called(transactionHashes)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionsByHashes")
	}

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*models.Transaction, error)); ok {
		return rf(transactionHashes)
	}
	if rf, ok := ret.Get(0).(func([]string) []*models.Transaction); ok {
		r0 = rf(transactionHashes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(transactionHashes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APP_GetTransactionsByHashes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionsByHashes'
type APP_GetTransactionsByHashes_Call struct {
	*mock.Call
}

// GetTransactionsByHashes is a helper method to define mock.On call
//   - transactionHashes []string
func (_e *APP_Expecter) GetTransactionsByHashes(transactionHashes interface{}) *APP_GetTransactionsByHashes_Call {
	return &APP_GetTransactionsByHashes_Call{Call: _e.mock.On("GetTransactionsByHashes", transactionHashes)}
}

func (_c *APP_GetTransactionsByHashes_Call) Run(run func(transactionHashes []string)) *APP_GetTransactionsByHashes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *APP_GetTransactionsByHashes_Call) Return(_a0 []*models.Transaction, _a1 error) *APP_GetTransactionsByHashes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APP_GetTransactionsByHashes_Call) RunAndReturn(run func([]string) ([]*models.Transaction, error)) *APP_GetTransactionsByHashes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserTransactions provides a mock function with given fields: userID
func (_m *APP) GetUserTransactions(userID string) ([]*models.Transaction, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTransactions")
	}

	var r0 []*models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Transaction, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APP_GetUserTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTransactions'
type APP_GetUserTransactions_Call struct {
	*mock.Call
}

// GetUserTransactions is a helper method to define mock.On call
//   - userID string
func (_e *APP_Expecter) GetUserTransactions(userID interface{}) *APP_GetUserTransactions_Call {
	return &APP_GetUserTransactions_Call{Call: _e.mock.On("GetUserTransactions", userID)}
}

func (_c *APP_GetUserTransactions_Call) Run(run func(userID string)) *APP_GetUserTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *APP_GetUserTransactions_Call) Return(_a0 []*models.Transaction, _a1 error) *APP_GetUserTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APP_GetUserTransactions_Call) RunAndReturn(run func(string) ([]*models.Transaction, error)) *APP_GetUserTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPP creates a new instance of APP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPP(t interface {
	mock.TestingT
	Cleanup(func())
}) *APP {
	mock := &APP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
