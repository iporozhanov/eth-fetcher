// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "eth-fetcher/database/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionGetter is an autogenerated mock type for the TransactionGetter type
type TransactionGetter struct {
	mock.Mock
}

type TransactionGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionGetter) EXPECT() *TransactionGetter_Expecter {
	return &TransactionGetter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *TransactionGetter) Close() {
	_m.Called()
}

// TransactionGetter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type TransactionGetter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *TransactionGetter_Expecter) Close() *TransactionGetter_Close_Call {
	return &TransactionGetter_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *TransactionGetter_Close_Call) Run(run func()) *TransactionGetter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionGetter_Close_Call) Return() *TransactionGetter_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *TransactionGetter_Close_Call) RunAndReturn(run func()) *TransactionGetter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransaction provides a mock function with given fields: txID
func (_m *TransactionGetter) GetTransaction(txID string) (*models.Transaction, error) {
	ret := _m.Called(txID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Transaction, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Transaction); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionGetter_GetTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransaction'
type TransactionGetter_GetTransaction_Call struct {
	*mock.Call
}

// GetTransaction is a helper method to define mock.On call
//   - txID string
func (_e *TransactionGetter_Expecter) GetTransaction(txID interface{}) *TransactionGetter_GetTransaction_Call {
	return &TransactionGetter_GetTransaction_Call{Call: _e.mock.On("GetTransaction", txID)}
}

func (_c *TransactionGetter_GetTransaction_Call) Run(run func(txID string)) *TransactionGetter_GetTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TransactionGetter_GetTransaction_Call) Return(_a0 *models.Transaction, _a1 error) *TransactionGetter_GetTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionGetter_GetTransaction_Call) RunAndReturn(run func(string) (*models.Transaction, error)) *TransactionGetter_GetTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionGetter creates a new instance of TransactionGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionGetter {
	mock := &TransactionGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
